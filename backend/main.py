import os
import base64
import shutil
import tempfile
from fastapi import FastAPI, UploadFile, Form
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
from openai import AzureOpenAI

# üîπ Carregar vari√°veis do .env
load_dotenv()

app = FastAPI()

# üîπ Configura√ß√£o do CORS (permite acesso do frontend)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # em produ√ß√£o, restringir ao dom√≠nio do frontend
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üîπ Cliente Azure OpenAI
client = AzureOpenAI(
    api_key=os.getenv("AZURE_OPENAI_KEY"),
    api_version=os.getenv("AZURE_OPENAI_VERSION"),
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT")
)

DEPLOYMENT_NAME = os.getenv("AZURE_OPENAI_DEPLOYMENT")

@app.get("/")
def home():
    return {"status": "ok", "message": "API STRIDE rodando üöÄ"}

# ==============================
# üìå Endpoint de an√°lise STRIDE
# ==============================

@app.post("/api/analise")
async def analisar_ameacas(
    image: UploadFile,
    tipo_app: str = Form(...),
    autenticacao: str = Form(...),
    internet: str = Form(...),
    dados_sensiveis: str = Form(...),
    descricao: str = Form(...)
):
    try:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp:
            shutil.copyfileobj(image.file, tmp)
            tmp_path = tmp.name

        with open(tmp_path, "rb") as f:
            encoded_image = base64.b64encode(f.read()).decode("ascii")

        prompt = f"""
Haja como um especialista em ciberseguran√ßa com mais de 20 anos de experi√™ncia,
utilizando a metodologia de amea√ßas STRIDE para construir modelos de amea√ßa abrangentes
para uma ampla gama de aplica√ß√µes. 

Sua tarefa √© analisar o resumo do c√≥digo e/ou o desenho de arquitetura fornecido
para produzir uma lista de amea√ßas espec√≠ficas da aplica√ß√£o.

Preste aten√ß√£o especial no conte√∫do do README, descri√ß√£o da aplica√ß√£o, detalhes t√©cnicos e na imagem da arquitetura.

Para cada categoria do STRIDE:
- Spoofing (falsifica√ß√£o de identidade)
- Tampering (viola√ß√£o da integridade)
- Repudiation (n√£o rep√∫dio)
- Information disclosure (vazamento de informa√ß√µes)
- Denial of service (nega√ß√£o de servi√ßo)
- Elevation of privilege (eleva√ß√£o de privil√©gios)

Liste m√∫ltiplas amea√ßas cred√≠veis. Para cada amea√ßa, forne√ßa uma situa√ß√£o plaus√≠vel e o potencial impacto no contexto da aplica√ß√£o.

Apresente a lista de amea√ßas no seguinte formato de tabela com as seguintes colunas, Ao fornecer os modelos e as respostas em JSON:
- JSON com a chave "stride_model"
- Um array de objetos, cada objeto contendo:

    - "stride_type": Tipo de amea√ßa (Spoofing, Tampering, etc.)
    - "scenario": Cen√°rio plaus√≠vel
    - "potential_impact": Impacto esperado
- Sugest√µes de melhoria para detalhar lacunas na descri√ß√£o da aplica√ß√£o, como arquiteturas, fluxos de autentica√ß√£o, exposi√ß√£o √† internet, dados sens√≠veis, etc.
- N√£o forne√ßa recomenda√ß√µes gen√©ricas de seguran√ßa, foque apenas no que ajudaria a criar um modelo de amea√ßas mais eficiente.
Ao fornecer o modelo de amea√ßa, utilize uma resposta em JSON com as chaves "threat_model" e "improvement_suggestions".
Em "threat_model", forne√ßa um array de objetos, cada objeto contendo "stride_type", "scenario" e "potential_impact".

Informa√ß√µes da aplica√ß√£o fornecidas:
- Tipo de aplica√ß√£o: {tipo_app}
- Autentica√ß√£o: {autenticacao}
- Acesso √† internet: {internet}
- Dados sens√≠veis: {dados_sensiveis}
- Descri√ß√£o da aplica√ß√£o: {descricao}
- Imagem da arquitetura (base64): {encoded_image}
"""


        # üîπ Chamada ao Azure OpenAI
        response = client.chat.completions.create(
            model=DEPLOYMENT_NAME,
            messages=[
                {"role": "system", "content": "Voc√™ √© um especialista em ciberseguran√ßa com 20 anos de experi√™ncia."},
                {"role": "user", "content": prompt},
                {"role": "user", "content": [
                    {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{encoded_image}"}}
                ]}
            ],
            max_tokens=1200,
        )

        # üîπ Limpar imagem tempor√°ria
        os.remove(tmp_path)

        return {"status": "ok", "result": response.choices[0].message.content}

    except Exception as e:
        return {"status": "erro", "detalhes": str(e)}
